[OktaIM2:group]
EVAL-dest = host
EVAL-vendor_product = "Okta"
FIELDALIAS-group-group_id = id as group_id
FIELDALIAS-id_as_serial = id AS serial
FIELDALIAS-profile_description_as_description = profile.description AS description
FIELDALIAS-profile_name_as_user = profile.name AS user
KV_MODE = json
category = Splunk App Add-on Builder
pulldown_type = 1
LOOKUP-group2app_lookup = okta2_app_group_lookup group_id as id OUTPUT app_id as accessible_apps
TIME_PREFIX = lastUpdated
TZ = UTC
LOOKUP-group2user_lookup = okta2_group_member_lookup group_id as id OUTPUT user_id as group_members

[OktaIM2:app]
EVAL-dest = host
EVAL-vendor_product = "Okta"
FIELDALIAS-user = credentials.userName as user
FIELDALIAS-app-app_id = id as app_id
FIELDALIAS-id_as_serial = id AS serial
FIELDALIAS-label_as_description = label AS description
KV_MODE = json
category = Splunk App Add-on Builder
pulldown_type = 1
TIME_PREFIX = lastUpdated
TZ = UTC

[OktaIM2:user]
EVAL-dest = host
EVAL-user_id = id
EVAL-vendor_product = "Okta"
FIELDALIAS-id_as_serial = id AS serial
FIELDALIAS-profile_displayName_as_description = profile.displayName AS description
FIELDALIAS-profile_login_as_user = profile.login AS user
KV_MODE = json
category = Splunk App Add-on Builder
pulldown_type = 1
LOOKUP-user2group_lookup = okta2_group_member_lookup user_id as id OUTPUT group_id
LOOKUP-user2app_lookup = okta2_app_user_lookup user_id as id OUTPUT app_id as accessible_apps
TIME_PREFIX = lastUpdated
TZ = UTC

[OktaIM2:log]
REPORT-extract_target_fields = okta_extract_target_data,okta_target_data_policy_entity_attributes_transform,okta_target_data_policy_rule_attributes_transform,okta_target_data_app_instance_attributes_transform,okta_target_data_app_user_attributes_transform,okta_target_data_app_group_attributes_transform,okta_target_data_user_attributes_transform,okta_target_data_user_group_attributes_transform

EVAL-app = COALESCE(targetAppDisplayName,if(mvfind(spath(_raw,"actor.type"),"AppInstance")>=0,mvindex(spath(_raw,"actor.displayName"),0),if(mvfind(spath(_raw,"actor.type"),"SystemPrincipal")>=0,mvindex(spath(_raw,"actor.displayName"),0),if(mvfind(spath(_raw,"actor.type"),"PublicClientApp")>=0,mvindex(spath(_raw,"actor.displayName"),0),"Okta"))))
EVAL-vendor_product = "Okta"
FIELDALIAS-client_ipAddress_as_src = client.ipAddress AS src
FIELDALIAS-client_ipAddress_as_src_ip = client.ipAddress AS src_ip
FIELDALIAS-host_as_dest = host AS dest
FIELDALIAS-result = "outcome.result" AS result
KV_MODE = json
LOOKUP-event_type_lookup = okta2_eventtype_lookup eventType OUTPUTNEW action event_type change_type object_category object_attrs
LOOKUP-user_detail_lookup = okta2_user_detail_lookup user_id OUTPUT firstName,lastName,loginName,email,secondEmail,primaryPhone,mobilePhone,state,city,countryCode,zipCode,streetAddress,status as user_status,created_time,lastUpdated_time,lastLogin_time,activated_time
LOOKUP-okta2_eventtype_alert_lookup = okta2_eventtype_alert_lookup eventType OUTPUT type
category = Splunk App Add-on Builder
pulldown_type = 1
TIME_PREFIX = published
TZ = UTC
EVAL-object = case(eventType IN ("system.import.user.update","application.provision.user.sync","application.provision.user.push_profile","application.user_membership.update","application.user_membership.add","application.provision.user.push","app.user_management.provision_user","application.user_membership.remove","application.provision.user.deactivate","app.generic.import.details.update_user","application.provision.user.reactivate","application.user_membership.change_username","application.user_membership.restore","application.user_membership.restore_password","system.import.user.delete"),targetUserAlternateId,eventType IN ("policy.execute.user.start"),targetPolicyEntityAlternateId,eventType IN ("group.user_membership.add","group.application_assignment.remove","group.application_assignment.add","group.user_membership.remove"),targetUserGroupAlternateId,eventType IN ("app.user_management"),targetAppGroupAlternateId,eventType IN ("policy.rule.update","policy.rule.activate","policy.rule.deactivate","policy.rule.add"),targetPolicyRuleAlternateId,eventType IN ("directory.app_user_profile.bootstrap"),targetAppAlternateId,eventType IN ("application.provision.user.deprovision"),targetAppUserAlternateId,eventType IN ("directory.mapping.update","application.lifecycle.deactivate","user.account.update_profile","user.account.reset_password","system.agent.ad.write_ldap","system.agent.ad.invoke_dir","system.agent.ad.reset_user_password","user.lifecycle.create","user.lifecycle.activate","user.mfa.factor.activate","user.lifecycle.deactivate","user.mfa.factor.deactivate","app.realtimesync.import.details.update_user","application.policy.sign_on.update","policy.lifecycle.update","user.mfa.factor.update","system.agent.ad.start","system.import.start","system.import.download.start","system.agent.ad.read_topology","system.agent.ad.read_ldap","system.import.download.complete","system.import.object_creation.start","system.import.object_creation.complete","user.account.update_secondary_email","application.lifecycle.update","group.lifecycle.create","policy.lifecycle.create","user.account.update_password","policy.lifecycle.deactivate","app.oauth2.as.key.rollover","application.configuration.reset_logo","application.configuration.update_logo","application.policy.sign_on.rule.create","user.lifecycle.suspend","user.lifecycle.unsuspend","user.session.clear"),if((mvindex(spath(_raw,"target{}.alternateId"),0)!="unknown" AND mvindex(spath(_raw,"target{}.alternateId"),0)!="null"),mvindex(spath(_raw,"target{}.alternateId"),0),mvindex(spath(_raw,"target{}.displayName"),0)))
EVAL-object_id = case(eventType IN ("system.import.user.update","application.provision.user.sync","application.provision.user.push_profile","application.user_membership.update","application.user_membership.add","application.provision.user.push","app.user_management.provision_user","application.user_membership.remove","application.provision.user.deactivate","app.generic.import.details.update_user","application.provision.user.reactivate","application.user_membership.change_username","application.user_membership.restore","application.user_membership.restore_password","system.import.user.delete"),targetUserId,eventType IN ("policy.execute.user.start"),targetPolicyEntityId,eventType IN ("group.user_membership.add","group.application_assignment.remove","group.application_assignment.add","group.user_membership.remove"),targetUserGroupId,eventType IN ("app.user_management"),targetAppGroupId,eventType IN ("policy.rule.update","policy.rule.activate","policy.rule.deactivate","policy.rule.add"),targetPolicyRuleId,eventType IN ("directory.app_user_profile.bootstrap"),targetAppId,eventType IN ("application.provision.user.deprovision"),targetAppUserId,eventType IN ("directory.mapping.update","application.lifecycle.deactivate","user.account.update_profile","user.account.reset_password","system.agent.ad.write_ldap","system.agent.ad.invoke_dir","system.agent.ad.reset_user_password","user.lifecycle.create","user.lifecycle.activate","user.mfa.factor.activate","user.lifecycle.deactivate","user.mfa.factor.deactivate","app.realtimesync.import.details.update_user","application.policy.sign_on.update","policy.lifecycle.update","user.mfa.factor.update","system.agent.ad.start","system.import.start","system.import.download.start","system.agent.ad.read_topology","system.agent.ad.read_ldap","system.import.download.complete","system.import.object_creation.start","system.import.object_creation.complete","user.account.update_secondary_email","application.lifecycle.update","group.lifecycle.create","policy.lifecycle.create","user.account.update_password","policy.lifecycle.deactivate","app.oauth2.as.key.rollover","application.configuration.reset_logo","application.configuration.update_logo","application.policy.sign_on.rule.create","user.lifecycle.suspend","user.lifecycle.unsuspend","user.session.clear"),if((mvindex(spath(_raw,"target{}.id"),0)!="unknown" AND mvindex(spath(_raw,"target{}.id"),0)!="null"),mvindex(spath(_raw,"target{}.id"),0),null))
EVAL-user = COALESCE(targetUserAlternateId,targetAppUserAlternateId)
FIELDALIAS-alert_id = transaction.id AS id
EVAL-description = case(displayMessage!="null",displayMessage,mvindex(spath(_raw,"outcome.reason"),0)!="null",mvindex(spath(_raw,"outcome.reason"),0),true(),null)
EVAL-body = case(displayMessage!="null",displayMessage,mvindex(spath(_raw,"outcome.reason"),0)!="null",mvindex(spath(_raw,"outcome.reason"),0),true(),null)
EVAL-severity = case(severity=="INFO","informational",severity=="DEBUG","informational",severity=="WARN","medium",severity=="ERROR","high",severity=="FATAL","critical")
EVAL-user_id = COALESCE(targetUserId,targetAppUserId)
EVAL-src_user = if(mvfind(spath(_raw,"actor.type"),"User")>=0,mvindex(spath(_raw,"actor.alternateId"),0),null)
EVAL-user_agent = if(mvindex(spath(_raw,"client.userAgent.rawUserAgent"),0)!="unknown",mvindex(spath(_raw,"client.userAgent.rawUserAgent"),0),null)
EVAL-reason = if(mvindex(spath(_raw,"outcome.reason"),0)!="null",mvindex(spath(_raw,"outcome.reason"),0),null)
FIELDALIAS-dvc = host AS dvc
FIELDALIAS-signature = eventType AS signature
EVAL-action = case(eventType IN ("user.authentication.auth_via_AD_agent","user.authentication.auth","user.authentication.auth_via_IDP","user.authentication.auth_via_mfa","user.authentication.auth_via_radius","user.session.start") AND mvindex(spath(_raw,"outcome.result"),0)=="FAILURE","failure",eventType IN ("user.authentication.auth_via_AD_agent","user.authentication.auth","user.authentication.auth_via_IDP","user.authentication.auth_via_mfa","user.authentication.auth_via_radius","user.session.start") AND mvindex(spath(_raw,"outcome.result"),0)=="SUCCESS","success")
EVAL-status = case(eventType IN ("application.policy.sign_on.deny_access","system.import.roadblock","system.org.rate_limit.violation") AND mvindex(spath(_raw,"outcome.result"),0)=="SUCCESS","failure",true(),lower(mvindex(spath(_raw,"outcome.result"),0)))
EVAL-authentication_method = if(mvindex(spath(_raw,"authenticationContext.interface"),0)!="null",mvindex(spath(_raw,"authenticationContext.interface"),0),null)

[source::...oktaGroupMemberChange_modalert.log*]
sourcetype = ta:oktaidentitycloudforsplunk:log

[source::...oktaUserStatusChange_modalert.log*]
sourcetype = ta:oktaidentitycloudforsplunk:log

[OktaIM2:addon]
REPORT-addonlogs = REPORT-addonlogs

[OktaIM2:appUser]
TIME_PREFIX = lastUpdated
TZ = UTC
EVAL-dest = host
EVAL-vendor_product = "Okta"
KV_MODE = json
category = Splunk App Add-on Builder
pulldown_type = 1
LOOKUP-app_detail_lookup = okta2_app_detail_lookup id as appid OUTPUT name as app_name, label as app_label
LOOKUP-user_detail_lookup = okta2_user_detail_lookup user_id as userid OUTPUT firstName,lastName,loginName,email,secondEmail,primaryPhone,mobilePhone,state,city,countryCode,zipCode,streetAddress,status as user_status,created_time,lastUpdated_time,lastLogin_time,activated_time
FIELDALIAS-userid_as_object_id = userid AS object_id
FIELDALIAS-userName_as_object = userName AS object
FIELDALIAS-userName_as_user = userName AS user
EVAL-action = "modified"
EVAL-change_type = "filesystem"
EVAL-object_category = "user"
EVAL-object_attrs = "status"
EVAL-status = "success"
FIELDALIAS-status_as_result = status AS result
FIELDALIAS-appid_as_app = appid AS app
FIELDALIAS-dvc = host AS dvc


[OktaIM2:groupUser]
EVAL-dest = host
EVAL-vendor_product = "Okta"
KV_MODE = json
category = Splunk App Add-on Builder
pulldown_type = 1
LOOKUP-group_detail_lookup = okta2_group_detail_lookup id as groupid OUTPUT name as group_name, type as group_type, description as group_description
LOOKUP-user_detail_lookup = okta2_user_detail_lookup user_id as userid OUTPUT firstName,lastName,loginName,email,secondEmail,primaryPhone,mobilePhone,state,city,countryCode,zipCode,streetAddress,status as user_status,created_time,lastUpdated_time,lastLogin_time,activated_time

[source::...ta_okta_identity_cloud_for_splunk*.log*]
sourcetype = OktaIM2:addon
BREAK_ONLY_BEFORE = ^\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2},\d{3}
